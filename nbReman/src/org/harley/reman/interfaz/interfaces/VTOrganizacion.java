/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.harley.reman.interfaz.interfaces;

import java.awt.event.*;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.tree.TreePath;
import org.harley.reman.interfaz.utilitario.ToolsInterface;
import org.harley.reman.sistema.Sistema;

/**
 *
 * @author User
 */
public class VTOrganizacion extends javax.swing.JInternalFrame {

    Sistema sysReman;
    TreePath dirTree;
    JFrame padre;
    MouseListener ml = new MouseAdapter() {
        @Override
        public void mouseClicked(MouseEvent e) {
            // Se obtiene el path para esa fila. Con el path podemos obtener
            // los nodos.
            if (e.getButton() == MouseEvent.BUTTON3) {
                dirTree = treeOrgMain.getPathForLocation(e.getX(), e.getY());
                treeOrgMain.setSelectionPath(dirTree);
                if (dirTree != null) {
                    switch (dirTree.getLastPathComponent().toString()) {
                        case "Documentos de la Organizaci贸n":
                            break;
                        case "Organizaci贸n":
                            menuDocOrg.show(e.getComponent(), e.getX(), e.getY() + 10);
                            break;
                        case "Actores":
                            menuDocAct.show(e.getComponent(), e.getX(), e.getY() + 10);
                            break;
                        case "Especialista":
                            menuDocPyt.show(e.getComponent(), e.getX(), e.getY() + 10);
                            break;
                        case "Fuente":
                            menuDocSth.show(e.getComponent(), e.getX(), e.getY() + 10);
                            break;
                    }
                    if (ToolsInterface.checkExpReg("ORG[0-9][0-9][0-9][0-9]", dirTree.getLastPathComponent().toString())) {
                        menuOrg.show(e.getComponent(), e.getX(), e.getY() + 10);
                    }
                    if (ToolsInterface.checkExpReg("PYT[0-9][0-9][0-9][0-9]", dirTree.getLastPathComponent().toString())) {
                        menuPyt.show(e.getComponent(), e.getX(), e.getY() + 10);
                    }
                    if (ToolsInterface.checkExpReg("STH[0-9][0-9][0-9][0-9]", dirTree.getLastPathComponent().toString())) {
                        menuSth.show(e.getComponent(), e.getX(), e.getY() + 10);
                    }
                }
            }
        }
    };

    public VTOrganizacion(JFrame padre, Sistema sysReman, JTree tree) {
        initComponents();
        this.padre = padre;
        this.sysReman = sysReman;
        treeOrgMain.setModel(tree.getModel());
        treeOrgMain.addMouseListener(ml);
    }

    public VTOrganizacion(JFrame padre, Sistema sysReman) {
        initComponents();
        this.padre = padre;
        this.sysReman = sysReman;
        treeOrgMain.addMouseListener(ml);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuDocOrg = new javax.swing.JPopupMenu();
        menuDocOrgItem1 = new javax.swing.JMenuItem();
        menuDocOrgItem2 = new javax.swing.JMenuItem();
        menuOrg = new javax.swing.JPopupMenu();
        menuOrgItem1 = new javax.swing.JMenuItem();
        menuOrgItem2 = new javax.swing.JMenuItem();
        menuDocPyt = new javax.swing.JPopupMenu();
        menuDocPytItem1 = new javax.swing.JMenuItem();
        menuDocSth = new javax.swing.JPopupMenu();
        menuDocSthItem1 = new javax.swing.JMenuItem();
        menuPyt = new javax.swing.JPopupMenu();
        menuPytItem1 = new javax.swing.JMenuItem();
        menuPytItem2 = new javax.swing.JMenuItem();
        menuSth = new javax.swing.JPopupMenu();
        menuSthItem1 = new javax.swing.JMenuItem();
        menuSthItem2 = new javax.swing.JMenuItem();
        ExportarFile = new javax.swing.JFileChooser();
        menuDocAct = new javax.swing.JPopupMenu();
        menuDocActItem1 = new javax.swing.JMenuItem();
        scrollTree = new javax.swing.JScrollPane();
        treeOrgMain = new javax.swing.JTree();

        menuDocOrgItem1.setText("Crear Organizacion");
        menuDocOrgItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuDocOrgItem1ActionPerformed(evt);
            }
        });
        menuDocOrg.add(menuDocOrgItem1);

        menuDocOrgItem2.setText("Exportar a pdf");
        menuDocOrgItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuDocOrgItem2ActionPerformed(evt);
            }
        });
        menuDocOrg.add(menuDocOrgItem2);

        menuOrgItem1.setText("Modificar");
        menuOrgItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOrgItem1ActionPerformed(evt);
            }
        });
        menuOrg.add(menuOrgItem1);

        menuOrgItem2.setText("Eliminar");
        menuOrgItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOrgItem2ActionPerformed(evt);
            }
        });
        menuOrg.add(menuOrgItem2);

        menuDocPytItem1.setText("Crear Especialista");
        menuDocPytItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuDocPytItem1ActionPerformed(evt);
            }
        });
        menuDocPyt.add(menuDocPytItem1);

        menuDocSthItem1.setText("Crear Fuente");
        menuDocSthItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuDocSthItem1ActionPerformed(evt);
            }
        });
        menuDocSth.add(menuDocSthItem1);

        menuPytItem1.setText("Modificar");
        menuPytItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPytItem1ActionPerformed(evt);
            }
        });
        menuPyt.add(menuPytItem1);

        menuPytItem2.setText("Eliminar");
        menuPytItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPytItem2ActionPerformed(evt);
            }
        });
        menuPyt.add(menuPytItem2);

        menuSthItem1.setText("Modificar");
        menuSthItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSthItem1ActionPerformed(evt);
            }
        });
        menuSth.add(menuSthItem1);

        menuSthItem2.setText("Eliminar");
        menuSthItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSthItem2ActionPerformed(evt);
            }
        });
        menuSth.add(menuSthItem2);

        ExportarFile.setDialogType(javax.swing.JFileChooser.CUSTOM_DIALOG);
        ExportarFile.setDialogTitle("Seleccione");

        menuDocActItem1.setText("Exportar a pdf");
        menuDocActItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuDocActItem1ActionPerformed(evt);
            }
        });
        menuDocAct.add(menuDocActItem1);

        setMaximizable(true);
        setResizable(true);
        setPreferredSize(new java.awt.Dimension(250, 322));

        treeOrgMain.setBackground(new java.awt.Color(217, 221, 255));
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Documento de la Educci贸n");
        javax.swing.tree.DefaultMutableTreeNode treeNode2 = new javax.swing.tree.DefaultMutableTreeNode("Educci贸n");
        javax.swing.tree.DefaultMutableTreeNode treeNode3 = new javax.swing.tree.DefaultMutableTreeNode("EDU 0001");
        treeNode2.add(treeNode3);
        treeNode1.add(treeNode2);
        treeOrgMain.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        scrollTree.setViewportView(treeOrgMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollTree, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollTree, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuDocOrgItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuDocOrgItem1ActionPerformed
        //NUEVA ORGANIZACION
        VCOrganizacion VOrg = new VCOrganizacion(padre, sysReman);
        VOrg.setVisible(true);
        if (VOrg.createSuccessful()) {
            actualizarJTree();
        }
    }//GEN-LAST:event_menuDocOrgItem1ActionPerformed

    private void menuOrgItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuOrgItem1ActionPerformed
        //MODIFICAR ORGANIZACION
        String path = dirTree.getLastPathComponent().toString();
        VMOrganizacion VOrg = new VMOrganizacion(padre, sysReman, path);
        if (VOrg.getLoadIsCorrect()) {
            VOrg.setVisible(true);
        } else {
            ToolsInterface.msjError(padre, "Error al cargar los datos de la Organizacion!");
        }
    }//GEN-LAST:event_menuOrgItem1ActionPerformed

    private void menuOrgItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuOrgItem2ActionPerformed
        //ELIMINAR ORGANIZACION
        String path;
        int resp = JOptionPane.showConfirmDialog(null, "Eliminar Organizaci贸n", "Alerta!", JOptionPane.YES_NO_OPTION);
        if (resp == 0) {
            path = dirTree.getLastPathComponent().toString();
            sysReman.eliminarOrganizacion(path);
            actualizarJTree();
            ToolsInterface.msjInfo(padre, "Eliminacion Exitosa", "Se elimino correctamente la Organizacion " + path);
        }

    }//GEN-LAST:event_menuOrgItem2ActionPerformed

    private void menuDocPytItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuDocPytItem1ActionPerformed
        //CREAR ESPECIALISTA
        VCEspecialista VEsp = new VCEspecialista(padre, sysReman);
        if (VEsp.getLoadIsCorrect()) {
            VEsp.setVisible(true);
        } else {
            ToolsInterface.msjError(padre, "Error al cargar las Organizaciones!");
        }
        if (VEsp.createSuccessful()) {
            actualizarJTree();
        }
    }//GEN-LAST:event_menuDocPytItem1ActionPerformed

    private void menuPytItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPytItem1ActionPerformed
        //MODIFICAR ESPECIALISTA
        String path = dirTree.getLastPathComponent().toString();
        VMEspecialista VOrg = new VMEspecialista(padre, sysReman, path);
        if (VOrg.getLoadIsCorrect()) {
            VOrg.setVisible(true);
        } else {
            ToolsInterface.msjError(padre, "Error al cargar los datos de la Organizacion!");
        }
    }//GEN-LAST:event_menuPytItem1ActionPerformed

    private void menuPytItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPytItem2ActionPerformed
        //ELIMINAR ESPECIALISTA
        String path;
        int resp = JOptionPane.showConfirmDialog(null, "Eliminar Especialista", "Alerta!", JOptionPane.YES_NO_OPTION);
        if (resp == 0) {
            path = dirTree.getLastPathComponent().toString();
            sysReman.eliminarProyectTeam(path);
            actualizarJTree();
            ToolsInterface.msjInfo(padre, "Eliminacion Exitosa", "Se elimino correctamente el Especialista " + path);
        }
    }//GEN-LAST:event_menuPytItem2ActionPerformed

    private void menuDocSthItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuDocSthItem1ActionPerformed
        //CREAR FUENTE
        VCFuente VFue = new VCFuente(padre, sysReman);
        if (VFue.getLoadIsCorrect()) {
            VFue.setVisible(true);
        } else {
            ToolsInterface.msjError(padre, "Error al cargar las Organizaciones!");
        }
        if (VFue.createSuccessful()) {
            actualizarJTree();
        }
    }//GEN-LAST:event_menuDocSthItem1ActionPerformed

    private void menuSthItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSthItem2ActionPerformed
        //ELIMINAR FUENTE
        String path;
        int resp = JOptionPane.showConfirmDialog(null, "Eliminar Fuente", "Alerta!", JOptionPane.YES_NO_OPTION);
        if (resp == 0) {
            path = dirTree.getLastPathComponent().toString();
            sysReman.eliminarStakeholder(path);
            actualizarJTree();
            ToolsInterface.msjInfo(padre, "Eliminacion Exitosa", "Se elimino correctamente la Fuente " + path);
        }
    }//GEN-LAST:event_menuSthItem2ActionPerformed

    private void menuSthItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSthItem1ActionPerformed
        //MODIFICAR ESPECIALISTA
        String path = dirTree.getLastPathComponent().toString();
        VMFuente VFue = new VMFuente(padre, sysReman, path);
        if (VFue.getLoadIsCorrect()) {
            VFue.setVisible(true);
        } else {
            ToolsInterface.msjError(padre, "Error al cargar los datos de la Organizacion!");
        }
    }//GEN-LAST:event_menuSthItem1ActionPerformed

    private void menuDocOrgItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuDocOrgItem2ActionPerformed
        //EXPORTAR A PDF ORGANIZACION
        int opt = ExportarFile.showSaveDialog(this);
        String direccion;
        String nombre;
        if (opt == JFileChooser.APPROVE_OPTION) {
            direccion = ExportarFile.getSelectedFile().getParent();
            nombre = ExportarFile.getSelectedFile().getName();
            nombre = ToolsInterface.addExtensionPdf(nombre);
            if(!nombre.equals("error")){
                if(!sysReman.exportarLibro(Sistema.LIB_ORG,direccion, nombre)){
                    ToolsInterface.msjError(padre, "Error al cargar las Organizaciones, reviselos antes de continuar la operacion!");
                }
            }else{
                ToolsInterface.msjError(padre, "Error con el nombre del archivo, intentelo nuevamente!");
            }   
        }
    }//GEN-LAST:event_menuDocOrgItem2ActionPerformed

    private void menuDocActItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuDocActItem1ActionPerformed
        //EXPORTAR A PDF ACTORES
        int opt = ExportarFile.showSaveDialog(this);
        String direccion;
        String nombre;
        if (opt == JFileChooser.APPROVE_OPTION) {
            direccion = ExportarFile.getSelectedFile().getParent();
            nombre = ExportarFile.getSelectedFile().getName();
            nombre = ToolsInterface.addExtensionPdf(nombre);
            if(!nombre.equals("error")){
                if(!sysReman.exportarLibro(Sistema.LIB_ACT,direccion, nombre)){
                    ToolsInterface.msjError(padre, "Error al cargar los Actores, reviselos antes de continuar la operacion!");
                }
            }else{
                ToolsInterface.msjError(padre, "Error con el nombre del archivo, intentelo nuevamente!");
            }   
        }
    }//GEN-LAST:event_menuDocActItem1ActionPerformed

    public void actualizarJTree() {
        JTree model = ToolsInterface.generateJTreeOrg(sysReman.getDirPrincipal() + "\\src\\org");
        treeOrgMain.setModel(model.getModel());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser ExportarFile;
    private javax.swing.JPopupMenu menuDocAct;
    private javax.swing.JMenuItem menuDocActItem1;
    private javax.swing.JPopupMenu menuDocOrg;
    private javax.swing.JMenuItem menuDocOrgItem1;
    private javax.swing.JMenuItem menuDocOrgItem2;
    private javax.swing.JPopupMenu menuDocPyt;
    private javax.swing.JMenuItem menuDocPytItem1;
    private javax.swing.JPopupMenu menuDocSth;
    private javax.swing.JMenuItem menuDocSthItem1;
    private javax.swing.JPopupMenu menuOrg;
    private javax.swing.JMenuItem menuOrgItem1;
    private javax.swing.JMenuItem menuOrgItem2;
    private javax.swing.JPopupMenu menuPyt;
    private javax.swing.JMenuItem menuPytItem1;
    private javax.swing.JMenuItem menuPytItem2;
    private javax.swing.JPopupMenu menuSth;
    private javax.swing.JMenuItem menuSthItem1;
    private javax.swing.JMenuItem menuSthItem2;
    private javax.swing.JScrollPane scrollTree;
    private javax.swing.JTree treeOrgMain;
    // End of variables declaration//GEN-END:variables
}
